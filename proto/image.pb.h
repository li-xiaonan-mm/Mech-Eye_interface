// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#ifndef PROTOBUF_INCLUDED_image_2eproto
#define PROTOBUF_INCLUDED_image_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_image_2eproto 

namespace protobuf_image_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_image_2eproto
namespace mmind {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace mmind
namespace google {
namespace protobuf {
template<> ::mmind::Request* Arena::CreateMaybeMessage<::mmind::Request>(Arena*);
template<> ::mmind::Response* Arena::CreateMaybeMessage<::mmind::Response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mmind {

// ===================================================================

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmind.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string valueString = 4;
  void clear_valuestring();
  static const int kValueStringFieldNumber = 4;
  const ::std::string& valuestring() const;
  void set_valuestring(const ::std::string& value);
  #if LANG_CXX11
  void set_valuestring(::std::string&& value);
  #endif
  void set_valuestring(const char* value);
  void set_valuestring(const char* value, size_t size);
  ::std::string* mutable_valuestring();
  ::std::string* release_valuestring();
  void set_allocated_valuestring(::std::string* valuestring);

  // double valueDouble = 2;
  void clear_valuedouble();
  static const int kValueDoubleFieldNumber = 2;
  double valuedouble() const;
  void set_valuedouble(double value);

  // int32 command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::google::protobuf::int32 command() const;
  void set_command(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mmind.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr valuestring_;
  double valuedouble_;
  ::google::protobuf::int32 command_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_image_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmind.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(NULL);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string cameraIds = 5;
  int cameraids_size() const;
  void clear_cameraids();
  static const int kCameraIdsFieldNumber = 5;
  const ::std::string& cameraids(int index) const;
  ::std::string* mutable_cameraids(int index);
  void set_cameraids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_cameraids(int index, ::std::string&& value);
  #endif
  void set_cameraids(int index, const char* value);
  void set_cameraids(int index, const char* value, size_t size);
  ::std::string* add_cameraids();
  void add_cameraids(const ::std::string& value);
  #if LANG_CXX11
  void add_cameraids(::std::string&& value);
  #endif
  void add_cameraids(const char* value);
  void add_cameraids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cameraids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cameraids();

  // bytes imageRGB = 2;
  void clear_imagergb();
  static const int kImageRGBFieldNumber = 2;
  const ::std::string& imagergb() const;
  void set_imagergb(const ::std::string& value);
  #if LANG_CXX11
  void set_imagergb(::std::string&& value);
  #endif
  void set_imagergb(const char* value);
  void set_imagergb(const void* value, size_t size);
  ::std::string* mutable_imagergb();
  ::std::string* release_imagergb();
  void set_allocated_imagergb(::std::string* imagergb);

  // bytes imageDepth = 3;
  void clear_imagedepth();
  static const int kImageDepthFieldNumber = 3;
  const ::std::string& imagedepth() const;
  void set_imagedepth(const ::std::string& value);
  #if LANG_CXX11
  void set_imagedepth(::std::string&& value);
  #endif
  void set_imagedepth(const char* value);
  void set_imagedepth(const void* value, size_t size);
  ::std::string* mutable_imagedepth();
  ::std::string* release_imagedepth();
  void set_allocated_imagedepth(::std::string* imagedepth);

  // bytes imageIr = 4;
  void clear_imageir();
  static const int kImageIrFieldNumber = 4;
  const ::std::string& imageir() const;
  void set_imageir(const ::std::string& value);
  #if LANG_CXX11
  void set_imageir(::std::string&& value);
  #endif
  void set_imageir(const char* value);
  void set_imageir(const void* value, size_t size);
  ::std::string* mutable_imageir();
  ::std::string* release_imageir();
  void set_allocated_imageir(::std::string* imageir);

  // string camIntri = 7;
  void clear_camintri();
  static const int kCamIntriFieldNumber = 7;
  const ::std::string& camintri() const;
  void set_camintri(const ::std::string& value);
  #if LANG_CXX11
  void set_camintri(::std::string&& value);
  #endif
  void set_camintri(const char* value);
  void set_camintri(const char* value, size_t size);
  ::std::string* mutable_camintri();
  ::std::string* release_camintri();
  void set_allocated_camintri(::std::string* camintri);

  // string cameraStatus = 9;
  void clear_camerastatus();
  static const int kCameraStatusFieldNumber = 9;
  const ::std::string& camerastatus() const;
  void set_camerastatus(const ::std::string& value);
  #if LANG_CXX11
  void set_camerastatus(::std::string&& value);
  #endif
  void set_camerastatus(const char* value);
  void set_camerastatus(const char* value, size_t size);
  ::std::string* mutable_camerastatus();
  ::std::string* release_camerastatus();
  void set_allocated_camerastatus(::std::string* camerastatus);

  // string parameterValue = 13;
  void clear_parametervalue();
  static const int kParameterValueFieldNumber = 13;
  const ::std::string& parametervalue() const;
  void set_parametervalue(const ::std::string& value);
  #if LANG_CXX11
  void set_parametervalue(::std::string&& value);
  #endif
  void set_parametervalue(const char* value);
  void set_parametervalue(const char* value, size_t size);
  ::std::string* mutable_parametervalue();
  ::std::string* release_parametervalue();
  void set_allocated_parametervalue(::std::string* parametervalue);

  // string error = 14;
  void clear_error();
  static const int kErrorFieldNumber = 14;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // int32 command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::google::protobuf::int32 command() const;
  void set_command(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mmind.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cameraids_;
  ::google::protobuf::internal::ArenaStringPtr imagergb_;
  ::google::protobuf::internal::ArenaStringPtr imagedepth_;
  ::google::protobuf::internal::ArenaStringPtr imageir_;
  ::google::protobuf::internal::ArenaStringPtr camintri_;
  ::google::protobuf::internal::ArenaStringPtr camerastatus_;
  ::google::protobuf::internal::ArenaStringPtr parametervalue_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::int32 command_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_image_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// int32 command = 1;
inline void Request::clear_command() {
  command_ = 0;
}
inline ::google::protobuf::int32 Request::command() const {
  // @@protoc_insertion_point(field_get:mmind.Request.command)
  return command_;
}
inline void Request::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:mmind.Request.command)
}

// double valueDouble = 2;
inline void Request::clear_valuedouble() {
  valuedouble_ = 0;
}
inline double Request::valuedouble() const {
  // @@protoc_insertion_point(field_get:mmind.Request.valueDouble)
  return valuedouble_;
}
inline void Request::set_valuedouble(double value) {
  
  valuedouble_ = value;
  // @@protoc_insertion_point(field_set:mmind.Request.valueDouble)
}

// string valueString = 4;
inline void Request::clear_valuestring() {
  valuestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::valuestring() const {
  // @@protoc_insertion_point(field_get:mmind.Request.valueString)
  return valuestring_.GetNoArena();
}
inline void Request::set_valuestring(const ::std::string& value) {
  
  valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmind.Request.valueString)
}
#if LANG_CXX11
inline void Request::set_valuestring(::std::string&& value) {
  
  valuestring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmind.Request.valueString)
}
#endif
inline void Request::set_valuestring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmind.Request.valueString)
}
inline void Request::set_valuestring(const char* value, size_t size) {
  
  valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmind.Request.valueString)
}
inline ::std::string* Request::mutable_valuestring() {
  
  // @@protoc_insertion_point(field_mutable:mmind.Request.valueString)
  return valuestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_valuestring() {
  // @@protoc_insertion_point(field_release:mmind.Request.valueString)
  
  return valuestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_valuestring(::std::string* valuestring) {
  if (valuestring != NULL) {
    
  } else {
    
  }
  valuestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valuestring);
  // @@protoc_insertion_point(field_set_allocated:mmind.Request.valueString)
}

// -------------------------------------------------------------------

// Response

// int32 command = 1;
inline void Response::clear_command() {
  command_ = 0;
}
inline ::google::protobuf::int32 Response::command() const {
  // @@protoc_insertion_point(field_get:mmind.Response.command)
  return command_;
}
inline void Response::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:mmind.Response.command)
}

// bytes imageRGB = 2;
inline void Response::clear_imagergb() {
  imagergb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::imagergb() const {
  // @@protoc_insertion_point(field_get:mmind.Response.imageRGB)
  return imagergb_.GetNoArena();
}
inline void Response::set_imagergb(const ::std::string& value) {
  
  imagergb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmind.Response.imageRGB)
}
#if LANG_CXX11
inline void Response::set_imagergb(::std::string&& value) {
  
  imagergb_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmind.Response.imageRGB)
}
#endif
inline void Response::set_imagergb(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imagergb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmind.Response.imageRGB)
}
inline void Response::set_imagergb(const void* value, size_t size) {
  
  imagergb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmind.Response.imageRGB)
}
inline ::std::string* Response::mutable_imagergb() {
  
  // @@protoc_insertion_point(field_mutable:mmind.Response.imageRGB)
  return imagergb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_imagergb() {
  // @@protoc_insertion_point(field_release:mmind.Response.imageRGB)
  
  return imagergb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_imagergb(::std::string* imagergb) {
  if (imagergb != NULL) {
    
  } else {
    
  }
  imagergb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagergb);
  // @@protoc_insertion_point(field_set_allocated:mmind.Response.imageRGB)
}

// bytes imageDepth = 3;
inline void Response::clear_imagedepth() {
  imagedepth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::imagedepth() const {
  // @@protoc_insertion_point(field_get:mmind.Response.imageDepth)
  return imagedepth_.GetNoArena();
}
inline void Response::set_imagedepth(const ::std::string& value) {
  
  imagedepth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmind.Response.imageDepth)
}
#if LANG_CXX11
inline void Response::set_imagedepth(::std::string&& value) {
  
  imagedepth_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmind.Response.imageDepth)
}
#endif
inline void Response::set_imagedepth(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imagedepth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmind.Response.imageDepth)
}
inline void Response::set_imagedepth(const void* value, size_t size) {
  
  imagedepth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmind.Response.imageDepth)
}
inline ::std::string* Response::mutable_imagedepth() {
  
  // @@protoc_insertion_point(field_mutable:mmind.Response.imageDepth)
  return imagedepth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_imagedepth() {
  // @@protoc_insertion_point(field_release:mmind.Response.imageDepth)
  
  return imagedepth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_imagedepth(::std::string* imagedepth) {
  if (imagedepth != NULL) {
    
  } else {
    
  }
  imagedepth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagedepth);
  // @@protoc_insertion_point(field_set_allocated:mmind.Response.imageDepth)
}

// bytes imageIr = 4;
inline void Response::clear_imageir() {
  imageir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::imageir() const {
  // @@protoc_insertion_point(field_get:mmind.Response.imageIr)
  return imageir_.GetNoArena();
}
inline void Response::set_imageir(const ::std::string& value) {
  
  imageir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmind.Response.imageIr)
}
#if LANG_CXX11
inline void Response::set_imageir(::std::string&& value) {
  
  imageir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmind.Response.imageIr)
}
#endif
inline void Response::set_imageir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imageir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmind.Response.imageIr)
}
inline void Response::set_imageir(const void* value, size_t size) {
  
  imageir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmind.Response.imageIr)
}
inline ::std::string* Response::mutable_imageir() {
  
  // @@protoc_insertion_point(field_mutable:mmind.Response.imageIr)
  return imageir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_imageir() {
  // @@protoc_insertion_point(field_release:mmind.Response.imageIr)
  
  return imageir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_imageir(::std::string* imageir) {
  if (imageir != NULL) {
    
  } else {
    
  }
  imageir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imageir);
  // @@protoc_insertion_point(field_set_allocated:mmind.Response.imageIr)
}

// repeated string cameraIds = 5;
inline int Response::cameraids_size() const {
  return cameraids_.size();
}
inline void Response::clear_cameraids() {
  cameraids_.Clear();
}
inline const ::std::string& Response::cameraids(int index) const {
  // @@protoc_insertion_point(field_get:mmind.Response.cameraIds)
  return cameraids_.Get(index);
}
inline ::std::string* Response::mutable_cameraids(int index) {
  // @@protoc_insertion_point(field_mutable:mmind.Response.cameraIds)
  return cameraids_.Mutable(index);
}
inline void Response::set_cameraids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mmind.Response.cameraIds)
  cameraids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Response::set_cameraids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:mmind.Response.cameraIds)
  cameraids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Response::set_cameraids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cameraids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mmind.Response.cameraIds)
}
inline void Response::set_cameraids(int index, const char* value, size_t size) {
  cameraids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mmind.Response.cameraIds)
}
inline ::std::string* Response::add_cameraids() {
  // @@protoc_insertion_point(field_add_mutable:mmind.Response.cameraIds)
  return cameraids_.Add();
}
inline void Response::add_cameraids(const ::std::string& value) {
  cameraids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mmind.Response.cameraIds)
}
#if LANG_CXX11
inline void Response::add_cameraids(::std::string&& value) {
  cameraids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mmind.Response.cameraIds)
}
#endif
inline void Response::add_cameraids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cameraids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mmind.Response.cameraIds)
}
inline void Response::add_cameraids(const char* value, size_t size) {
  cameraids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mmind.Response.cameraIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::cameraids() const {
  // @@protoc_insertion_point(field_list:mmind.Response.cameraIds)
  return cameraids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_cameraids() {
  // @@protoc_insertion_point(field_mutable_list:mmind.Response.cameraIds)
  return &cameraids_;
}

// string camIntri = 7;
inline void Response::clear_camintri() {
  camintri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::camintri() const {
  // @@protoc_insertion_point(field_get:mmind.Response.camIntri)
  return camintri_.GetNoArena();
}
inline void Response::set_camintri(const ::std::string& value) {
  
  camintri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmind.Response.camIntri)
}
#if LANG_CXX11
inline void Response::set_camintri(::std::string&& value) {
  
  camintri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmind.Response.camIntri)
}
#endif
inline void Response::set_camintri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  camintri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmind.Response.camIntri)
}
inline void Response::set_camintri(const char* value, size_t size) {
  
  camintri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmind.Response.camIntri)
}
inline ::std::string* Response::mutable_camintri() {
  
  // @@protoc_insertion_point(field_mutable:mmind.Response.camIntri)
  return camintri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_camintri() {
  // @@protoc_insertion_point(field_release:mmind.Response.camIntri)
  
  return camintri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_camintri(::std::string* camintri) {
  if (camintri != NULL) {
    
  } else {
    
  }
  camintri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camintri);
  // @@protoc_insertion_point(field_set_allocated:mmind.Response.camIntri)
}

// string cameraStatus = 9;
inline void Response::clear_camerastatus() {
  camerastatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::camerastatus() const {
  // @@protoc_insertion_point(field_get:mmind.Response.cameraStatus)
  return camerastatus_.GetNoArena();
}
inline void Response::set_camerastatus(const ::std::string& value) {
  
  camerastatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmind.Response.cameraStatus)
}
#if LANG_CXX11
inline void Response::set_camerastatus(::std::string&& value) {
  
  camerastatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmind.Response.cameraStatus)
}
#endif
inline void Response::set_camerastatus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  camerastatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmind.Response.cameraStatus)
}
inline void Response::set_camerastatus(const char* value, size_t size) {
  
  camerastatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmind.Response.cameraStatus)
}
inline ::std::string* Response::mutable_camerastatus() {
  
  // @@protoc_insertion_point(field_mutable:mmind.Response.cameraStatus)
  return camerastatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_camerastatus() {
  // @@protoc_insertion_point(field_release:mmind.Response.cameraStatus)
  
  return camerastatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_camerastatus(::std::string* camerastatus) {
  if (camerastatus != NULL) {
    
  } else {
    
  }
  camerastatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camerastatus);
  // @@protoc_insertion_point(field_set_allocated:mmind.Response.cameraStatus)
}

// string parameterValue = 13;
inline void Response::clear_parametervalue() {
  parametervalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::parametervalue() const {
  // @@protoc_insertion_point(field_get:mmind.Response.parameterValue)
  return parametervalue_.GetNoArena();
}
inline void Response::set_parametervalue(const ::std::string& value) {
  
  parametervalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmind.Response.parameterValue)
}
#if LANG_CXX11
inline void Response::set_parametervalue(::std::string&& value) {
  
  parametervalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmind.Response.parameterValue)
}
#endif
inline void Response::set_parametervalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parametervalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmind.Response.parameterValue)
}
inline void Response::set_parametervalue(const char* value, size_t size) {
  
  parametervalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmind.Response.parameterValue)
}
inline ::std::string* Response::mutable_parametervalue() {
  
  // @@protoc_insertion_point(field_mutable:mmind.Response.parameterValue)
  return parametervalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_parametervalue() {
  // @@protoc_insertion_point(field_release:mmind.Response.parameterValue)
  
  return parametervalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_parametervalue(::std::string* parametervalue) {
  if (parametervalue != NULL) {
    
  } else {
    
  }
  parametervalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parametervalue);
  // @@protoc_insertion_point(field_set_allocated:mmind.Response.parameterValue)
}

// string error = 14;
inline void Response::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::error() const {
  // @@protoc_insertion_point(field_get:mmind.Response.error)
  return error_.GetNoArena();
}
inline void Response::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmind.Response.error)
}
#if LANG_CXX11
inline void Response::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmind.Response.error)
}
#endif
inline void Response::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmind.Response.error)
}
inline void Response::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmind.Response.error)
}
inline ::std::string* Response::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:mmind.Response.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_error() {
  // @@protoc_insertion_point(field_release:mmind.Response.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:mmind.Response.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mmind

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_image_2eproto
